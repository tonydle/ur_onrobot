<?xml version="1.0"?>
<robot xmlns:xacro="http://wiki.ros.org/xacro" name="$(arg robot_model)_onrobot_$(arg onrobot_model)_gazebo">

  <!-- Definition of the main macro -->
  <xacro:macro name="ur_onrobot_gazebo" params="
   prefix
   robot_model
   onrobot_model
   joint_limits_parameters_file
   kinematics_parameters_file
   physical_parameters_file
   visual_parameters_file
   transmission_hw_interface:=hardware_interface/PositionJointInterface
   safety_limits:=false safety_pos_margin:=0.15 safety_k_position:=20"
  >
  
  <!--
    Import the xacro macro for the REAL robot (which we'll augment with Gazebo
    specific elements in the wrapper macro below).

    NOTE: this imports the '_macro.xacro' from ur_description, as that contains
    the definitions for the real robot.
  -->
  <xacro:include filename="$(find ur_onrobot_description)/urdf/ur_onrobot.xacro"/>

    <!-- Configure self collision properties per link -->
    <gazebo reference="${prefix}shoulder_link">
      <selfCollide>true</selfCollide>
    </gazebo>
    <gazebo reference="${prefix}upper_arm_link">
      <selfCollide>true</selfCollide>
    </gazebo>
    <gazebo reference="${prefix}forearm_link">
      <selfCollide>true</selfCollide>
    </gazebo>
    <gazebo reference="${prefix}wrist_1_link">
      <selfCollide>true</selfCollide>
    </gazebo>
    <gazebo reference="${prefix}wrist_3_link">
      <selfCollide>true</selfCollide>
    </gazebo>
    <gazebo reference="${prefix}wrist_2_link">
      <selfCollide>true</selfCollide>
    </gazebo>
    <gazebo reference="${prefix}ee_link">
      <selfCollide>true</selfCollide>
    </gazebo>

    <!--
      Inject Gazebo ROS Control plugin, which allows us to use ros_control
      controllers to control the virtual robot hw.
    -->
    <gazebo>
      <plugin name="ros_control" filename="libgazebo_ros_control.so">
        <!--robotNamespace>/</robotNamespace-->
        <!--robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType-->
      </plugin>
    </gazebo>
  </xacro:macro>

  <!--Declare arguments -->
  <xacro:arg name="joint_limit_params" default=""/>
  <xacro:arg name="physical_params" default=""/>
  <xacro:arg name="kinematics_params" default=""/>
  <xacro:arg name="visual_params" default=""/>
  <!--
    legal values:
      - hardware_interface/PositionJointInterface
      - hardware_interface/VelocityJointInterface
      - hardware_interface/EffortJointInterface

    NOTE: this value must correspond to the controller configured in the
          controller .yaml files in the 'config' directory.
  -->
  <xacro:arg name="transmission_hw_interface" default="hardware_interface/PositionJointInterface"/>
  <xacro:arg name="safety_limits" default="false"/>
  <xacro:arg name="safety_pos_margin" default="0.15"/>
  <xacro:arg name="safety_k_position" default="20"/>

  <!-- Instantiate the Gazebo robot and pass it all the required arguments. -->
  <xacro:ur_onrobot_gazebo
    prefix=""
    robot_model="$(arg robot_model)"
    onrobot_model="$(arg onrobot_model)"
    joint_limits_parameters_file="$(arg joint_limit_params)"
    kinematics_parameters_file="$(arg kinematics_params)"
    physical_parameters_file="$(arg physical_params)"
    visual_parameters_file="$(arg visual_params)"
    transmission_hw_interface="$(arg transmission_hw_interface)"
    safety_limits="$(arg safety_limits)"
    safety_pos_margin="$(arg safety_pos_margin)"
    safety_k_position="$(arg safety_k_position)"
  />

  <!--
    Attach the Gazebo model to Gazebo's world frame.

    Note: if you're looking to integrate a UR into a larger scene and need
    to add EEFs or other parts, DO NOT change this file or the 'world' link
    here. Create a NEW xacro instead and decide whether you need to add
    a 'world' link there.
  -->
  <link name="world"/>
  <joint name="world_joint" type="fixed">
    <parent link="world"/>
    <child link="base_link"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint>

  <!-- <link name="tool0_controller"/>
  <joint name="tool_controller_fake_joint" type="fixed">
    <parent link="tool0"/>
    <child link="tool0_controller"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint> -->
</robot>
