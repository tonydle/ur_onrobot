<?xml version="1.0"?>
<launch>
  <arg name="controller_config_file" doc="Config file used for defining the ROS-Control controllers."/>

  <!-- Gazebo parameters -->
  <arg name="gazebo_model_name" default="robot" doc="The name to give to the model in Gazebo (after spawning it)." />
  <arg name="gazebo_world" default="worlds/empty.world" doc="The '.world' file to load in Gazebo." />
  <arg name="gui" default="true" doc="If true, Gazebo UI is started. If false, only start Gazebo server." />
  <arg name="paused" default="false" doc="If true, start Gazebo in paused mode. If false, start simulation as soon as Gazebo has loaded." />
  <arg name="robot_description_param_name" default="robot_description" doc="Name of the parameter which contains the robot description (ie: URDF) which should be spawned into Gazebo." />
  <arg name="spawn_z" default="0.1" doc="At which height the model should be spawned. NOTE: lower values will cause the robot to collide with the ground plane." />
  <arg name="start_gazebo" default="true" doc="If true, Gazebo will be started. If false, Gazebo will be assumed to have been started elsewhere." />

  <!-- Load controller settings -->
  <rosparam file="$(arg controller_config_file)" command="load"/>

  <!-- Start Gazebo and load the empty world if requested to do so -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch" if="$(arg start_gazebo)">
    <arg name="world_name" value="$(arg gazebo_world)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gui" value="$(arg gui)"/>
  </include>

  <!-- Spawn the model loaded earlier in the simulation just started -->
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model"
    args="
      -urdf
      -param $(arg robot_description_param_name)
      -model $(arg gazebo_model_name)
      -z $(arg spawn_z)"
    output="screen" respawn="false" />

  <!-- Load and start controllers  -->
  <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner"
    args="/ur/joint_state_controller /ur/scaled_pos_joint_traj_controller
          /onrobot/joint_state_controller /onrobot/gripper_controller" output="screen" respawn="false" />

  <!-- Load other controllers, but do not start them -->
  <!-- <node name="ros_control_stopped_spawner" pkg="controller_manager" type="spawner"
    args="stopped /ur/joint_group_pos_controller /onrobot/joint_position_controller" output="screen" respawn="false" /> -->


  <!-- Start OnRobot controllers -->
  <!-- <node name="rg_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
      ns="/onrobot"
      output="screen" args="joint_state_controller gripper_controller"/>

  <node name="rg_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
      ns="/onrobot"
      respawn="true" output="screen" /> -->

  <!-- <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <rosparam param="source_list">[/ur/joint_states,/onrobot/joint_states]</rosparam>
    <rosparam param="rate">50</rosparam>
  </node> -->

</launch>
